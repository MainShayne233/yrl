// vi: ft=rust

use crate::ast::{Declaration, DeclarationType, Grammar};

grammar;


pub Grammar: Grammar = {
    <Declarations> => Grammar {
        declarations: <>.into_iter().rev().collect()
    },
}

Declarations: Vec<Declaration> = {
    <Declaration> => vec![<>],
    <x:Declaration> <v:Declarations> => {
        let mut v = v;
        v.push(x);
        v
    }
}

Declaration: Declaration = {
    <t:DeclarationType> <v:DeclarationValues> "." => Declaration(t, v.into_iter().rev().collect())
}

DeclarationType: DeclarationType = {
    "Nonterminals" => DeclarationType::Nonterminals,
    "Terminals" => DeclarationType::Terminals,
    "Rootsymbol" => DeclarationType::Rootsymbol,
    "Expect" => DeclarationType::Expect,
    "Left" => DeclarationType::Left,
    "Right" => DeclarationType::Right,
    "Nonassoc" => DeclarationType::Nonassoc,
}

DeclarationValues: Vec<String> = {
    <x:DeclarationValue> => vec![x],

    <x:DeclarationValue> <v:DeclarationValues> => {
        let mut v = v;
        v.push(x);
        v
    }
}

DeclarationValue: String = {
    <RawIdentifier>,
}

RawIdentifier: String = {
    r"[a-z|_]*" => <>.to_string(),
}
