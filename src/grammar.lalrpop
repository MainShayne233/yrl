// vi: ft=rust

use crate::ast::{Declaration, DeclarationType, Grammar, NodeExpression, Node};

grammar;


pub Grammar: Grammar = {
    <declarations:Declarations> <nodes:Nodes> => Grammar {
        declarations: declarations.into_iter().rev().collect(),
        nodes: nodes.into_iter().rev().collect(),
    },
}

Nodes: Vec<Node> = {
    <Node> => vec![<>],
    <x:Node> <v:Nodes> => {
        let mut v = v;
        v.push(x);
        v
    }
}

Node: Node = {
    <lhs:NodeLHS> "->" <rhs:NodeRHS> ":" <expressions:Comma<NodeExpression>> "." => Node {
        lhs: lhs,
        rhs: rhs.into_iter().rev().collect(),
        expressions: expressions,
    }
}

NodeLHS: String = {
    UnderscoreIdentPattern => <>.to_string(),
}

NodeRHS: Vec<String> = {
    <x:NodeRHSPart> => vec![x],

    <x:NodeRHSPart> <v:NodeRHS> => {
        let mut v = v;
        v.push(x);
        v
    }
}

NodeRHSPart: String = {
    UnderscoreIdentPattern => <>.to_string(),
    SingleQuotedValuePattern => <>.to_string(),
}

NodeExpression: NodeExpression = {
    <NodeExpressionFunctionCall>,
    <NodeExpressionMacroCall>,
    <NodeExpressionTuple>,
    <NodeExpressionList>,
    <NodeExpressionHeadTailList>,
    <NodeExpressionBinary>,
    <NodeExpressionCharlist>,
    <NodeExpressionInteger>,
    <NodeExpressionAtom>,
}

NodeExpressionInteger: NodeExpression = {
    <IntPattern>  => NodeExpression::Integer { value: <>.to_string().parse::<i64>().unwrap() },
}

NodeExpressionAtom: NodeExpression = {
    <UnderscoreIdentPattern>  => NodeExpression::Atom { value: <>.to_string() },
}

NodeExpressionCharlist: NodeExpression = {
    <SingleQuotedValuePattern>  => NodeExpression::Charlist { value: <>.to_string() },
}

NodeExpressionBinary: NodeExpression = {
    // TODO Fix this pattern
    "<<$" <r"[^>]"> ">>"  => NodeExpression::Binary { value: <>.to_string() },
    "<<$:>>" => NodeExpression::Binary { value: ":".to_string() },
}

NodeExpressionFunctionCall: NodeExpression = {
    <name:UnderscoreIdentPattern> "(" <args:Comma<NodeExpression>> ")" => NodeExpression::FunctionCall {
        name: name.to_string(),
        args: Box::new(args)
    },
}

NodeExpressionMacroCall: NodeExpression = {
    "?" <name:UnderscoreIdentPattern> "(" <args:Comma<NodeExpression>> ")" => NodeExpression::MacroCall {
        name: name.to_string(),
        args: Box::new(args)
    },
}

NodeExpressionTuple: NodeExpression = {
    "{" <values:Comma<NodeExpression>> "}" => NodeExpression::Tuple {
        values: Box::new(values)
    },
}

NodeExpressionList: NodeExpression = {
    "[" <values:Comma<NodeExpression>> "]" => NodeExpression::List {
        values: Box::new(values)
    },
}

NodeExpressionHeadTailList: NodeExpression = {
    "[" <head:Comma<NodeExpression>> "|" <tail:NodeExpression> "]" => NodeExpression::HeadTailList {
        head: Box::new(head),
        tail: Box::new(tail),
    },
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Declarations: Vec<Declaration> = {
    <Declaration> => vec![<>],
    <x:Declaration> <v:Declarations> => {
        let mut v = v;
        v.push(x);
        v
    }
}

Declaration: Declaration = {
    <t:DeclarationType> <v:DeclarationValues> "." => Declaration(t, v.into_iter().rev().collect())
}

DeclarationType: DeclarationType = {
    "Nonterminals" => DeclarationType::Nonterminals,
    "Terminals" => DeclarationType::Terminals,
    "Rootsymbol" => DeclarationType::Rootsymbol,
    "Expect" => DeclarationType::Expect,
    "Left" => DeclarationType::Left,
    "Right" => DeclarationType::Right,
    "Nonassoc" => DeclarationType::Nonassoc,
}

DeclarationValues: Vec<String> = {
    <x:DeclarationValue> => vec![x],

    <x:DeclarationValue> <v:DeclarationValues> => {
        let mut v = v;
        v.push(x);
        v
    }
}

DeclarationValue: String = {
    UnderscoreIdentPattern => <>.to_string(),
    IntPattern => <>.to_string(),
    SingleQuotedValuePattern => <>.to_string()
}

match {
  r"[a-z][a-z|_]*" => UnderscoreIdentPattern,
  r"[0-9]+" => IntPattern,
    r"'[^']+'" => SingleQuotedValuePattern,
} else {
   _,
}

